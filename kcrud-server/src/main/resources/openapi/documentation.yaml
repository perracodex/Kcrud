openapi: "3.1.0"
info:
  title: "Kcrud API"
  description: "Kcrud API"
  version: "1.0.0"
servers:
  - url: "https://Kcrud"
paths:
  /:
    get:
      description: "Server root endpoint."
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World."
                Example#2:
                  value: ""
  /auth/token/create:
    post:
      description: "Creates a new token and responds with it."
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid session context. Use either admin/admin or guest/guest."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Function1_? super String"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Failed to generate token."
  /auth/token/refresh:
    post:
      description: "Endpoint for token refresh. <br> No Basic Authentication is required\
        \ here, but an existing token's validity will be checked. <br> For example,\
        \ in Postman set the endpoint and in the Headers add an Authorization key\
        \ <br> with a 'Bearer' holding a previous valid token."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Function1_? super String"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid session context. Use either admin/admin or guest/guest."
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Failed to generate token."
        "401":
          description: "Unauthorized <br> Token is invalid; respond with an Unauthorized\
            \ status."
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid token."
  /demo:
    delete:
      description: "Delete all demo records."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    get:
      description: "Return demo records interactive HTML."
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Function1_? super HTML"
              examples:
                text/html:
                  description: "HTML document"
                  value: ""
    post:
      description: "Create a batch of demo records."
      parameters:
        - name: "count"
          in: "query"
          required: false
          schema:
            type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid count. Must be between 1 and 100000."
            application/json:
              schema:
                type: "string"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /demo/json:
    get:
      description: "Return all demo records as JSON."
      parameters:
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Page_? extends EmploymentDto"
  /events:
    get:
      description: "Server-Sent Events (SSE) endpoint."
      responses:
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
  /health:
    get:
      description: "Healthcheck providing the current operational status."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HealthCheck"
  /rbac/dashboard:
    get:
      description: ""
      parameters:
        - name: "role"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "/rbac/login"
        "200":
          description: "OK <br> Respond with HTML view of the RBAC dashboard."
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Function1_? super HTML"
              examples:
                text/html:
                  description: "HTML document"
                  value: ""
    post:
      description: ""
      parameters:
        - name: "role"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "/rbac/login"
                Example#2:
                  description: ""
                  value: "/rbac/login"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid or missing role ID."
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Function1_? super HTML"
              examples:
                text/html:
                  description: "HTML document"
                  value: ""
  /rbac/login:
    get:
      description: "Redirects actors to the dashboard if they have an existing session\
        \ <br> or to the login page if no valid session is found."
      responses:
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "/rbac/dashboard"
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Function1_? super HTML"
              examples:
                text/html:
                  description: "HTML document"
                  value: ""
    post:
      description: ""
      responses:
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "/rbac/dashboard"
  /rbac/logout:
    post:
      description: "Clears the session and redirects to the login page."
      responses:
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "/rbac/login"
  /scheduler/audit:
    get:
      description: "Returns the audit logs for the scheduler."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AuditDto"
  /scheduler/audit/{name}/{group}:
    get:
      description: "Returns the audit log for a specific task."
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "group"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No audit logs found for the task."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AuditDto"
  /scheduler/dashboard:
    get:
      description: "The scheduler dashboard route."
      parameters:
        - name: "group"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ThymeleafContent"
              examples:
                Example#1:
                  description: ""
                  value:
                    template: "scheduler/dashboard"
                    model: "null"
                    etag: "null"
                    contentType: "null"
                    locale: "null"
                    fragments: "null"
  /scheduler/pause:
    post:
      description: "Pauses all the scheduler tasks."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskStateChangeDto"
  /scheduler/restart:
    post:
      description: "Restart the task scheduler."
      parameters:
        - name: "interrupt"
          in: "query"
          required: false
          schema:
            type: "boolean"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /scheduler/resume:
    post:
      description: "Resume all the scheduler tasks."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskStateChangeDto"
  /scheduler/state:
    get:
      description: "Returns the state of the task scheduler."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /scheduler/task:
    delete:
      description: "Deletes all scheduler tasks."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
    get:
      description: "Gets all scheduler tasks."
      parameters:
        - name: "group"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TaskScheduleDto"
  /scheduler/task/{name}/{group}:
    delete:
      description: "Deletes a concrete scheduler task."
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "group"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
  /scheduler/task/{name}/{group}/pause:
    post:
      description: "Pause a concrete scheduler task."
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "group"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskStateChangeDto"
  /scheduler/task/{name}/{group}/resend:
    post:
      description: "Resends a concrete scheduler task."
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "group"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /scheduler/task/{name}/{group}/resume:
    post:
      description: "Resume a concrete scheduled task."
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "group"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskStateChangeDto"
  /scheduler/task/group:
    get:
      description: "Gets all scheduler task groups."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "string"
  /snowflake/{id}:
    get:
      description: "Snowflake parser to read back the components of a snowflake ID."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SnowflakeData"
  /v1/employees:
    post:
      description: "Search (Filter) employees."
      parameters:
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Page_? extends EmployeeDto"
  /v1/employees/{employee_id}:
    delete:
      description: "Delete an employee by ID."
      parameters:
        - name: "employee_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
    get:
      description: "Find an employee by ID."
      parameters:
        - name: "employee_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: "string"
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeDto"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                type: "string"
    put:
      description: "Update an employee by ID."
      parameters:
        - name: "employee_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: "string"
            '*/*':
              schema:
                type: "string"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeDto"
  /v1/employees/{employee_id}/employments:
    delete:
      description: "Delete all employments for an employee ID."
      parameters:
        - name: "employee_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
    get:
      description: "Find all employments for an employee ID."
      parameters:
        - name: "employee_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EmploymentDto"
    post:
      description: "Create a new employment."
      parameters:
        - name: "employee_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: "string"
            '*/*':
              schema:
                type: "string"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmploymentDto"
  /v1/employees/{employee_id}/employments/{employment_id}:
    delete:
      description: "Delete an employment by ID."
      parameters:
        - name: "employment_id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "employee_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
    get:
      description: "Find an employment by ID."
      parameters:
        - name: "employee_id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "employment_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: "string"
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmploymentDto"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                type: "string"
    put:
      description: "Update an employment by ID."
      parameters:
        - name: "employee_id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "employment_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: "string"
            '*/*':
              schema:
                type: "string"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmploymentDto"
components:
  schemas:
    Function1:
      type: "object"
      properties: { }
    Function1_? super String:
      type: "object"
    Function1_? super HTML:
      type: "object"
    Sort:
      type: "object"
      properties:
        table:
          type: "string"
        field:
          type: "string"
        direction:
          type: "string"
          enum:
            - "ASC"
            - "DESC"
      required:
        - "field"
        - "direction"
    Page:
      type: "object"
      properties:
        totalPages:
          type: "integer"
          format: "int32"
        pageIndex:
          type: "integer"
          format: "int32"
        totalElements:
          type: "integer"
          format: "int32"
        elementsPerPage:
          type: "integer"
          format: "int32"
        elementsInPage:
          type: "integer"
          format: "int32"
        hasNext:
          type: "boolean"
        hasPrevious:
          type: "boolean"
        overflow:
          type: "boolean"
        sort:
          type: "array"
          items:
            $ref: "#/components/schemas/Sort"
        content:
          type: "array"
      required:
        - "content"
    Page_? extends EmploymentDto:
      type: "object"
      properties:
        totalPages:
          type: "integer"
          format: "int32"
        pageIndex:
          type: "integer"
          format: "int32"
        totalElements:
          type: "integer"
          format: "int32"
        elementsPerPage:
          type: "integer"
          format: "int32"
        elementsInPage:
          type: "integer"
          format: "int32"
        hasNext:
          type: "boolean"
        hasPrevious:
          type: "boolean"
        overflow:
          type: "boolean"
        sort:
          type: "array"
          items:
            $ref: "#/components/schemas/Sort"
        content:
          type: "array"
          items:
            type: "object"
    ApplicationCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        apiSchemaEnabled:
          type: "boolean"
      required:
        - "errors"
    Configured:
      type: "object"
      properties:
        protocol:
          type: "string"
        port:
          type: "integer"
          format: "int32"
        sslPort:
          type: "integer"
          format: "int32"
        host:
          type: "string"
        allowedHosts:
          type: "array"
          items:
            type: "string"
      required:
        - "protocol"
        - "host"
        - "allowedHosts"
    ServerSpec:
      type: "object"
      properties:
        serverHost:
          type: "string"
        serverPort:
          type: "integer"
          format: "int32"
        localHost:
          type: "string"
        localPort:
          type: "integer"
          format: "int32"
        remoteHostHost:
          type: "string"
        remoteAddress:
          type: "string"
        remotePort:
          type: "integer"
          format: "int32"
        httpVersion:
          type: "string"
        scheme:
          type: "string"
    DeploymentCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        configured:
          $ref: "#/components/schemas/Configured"
        serverSpec:
          $ref: "#/components/schemas/ServerSpec"
        connectors:
          type: "string"
      required:
        - "errors"
        - "configured"
        - "serverSpec"
        - "connectors"
    LocalDateTime:
      type: "object"
      properties: { }
    RuntimeCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        machineId:
          type: "integer"
          format: "int32"
        environment:
          type: "string"
          enum:
            - "DEV"
            - "PROD"
            - "STAGING"
            - "TEST"
        developmentModeEnabled:
          type: "boolean"
        utc:
          $ref: "#/components/schemas/LocalDateTime"
        local:
          $ref: "#/components/schemas/LocalDateTime"
      required:
        - "errors"
        - "environment"
        - "utc"
        - "local"
    SchedulerCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        totalTasks:
          type: "integer"
          format: "int32"
      required:
        - "errors"
    LimitSpec:
      type: "object"
      properties:
        limit:
          type: "integer"
          format: "int32"
        refillMs:
          type: "integer"
          format: "int64"
    SecurityCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        useSecureConnection:
          type: "boolean"
        publicApi:
          $ref: "#/components/schemas/LimitSpec"
        privateApi:
          $ref: "#/components/schemas/LimitSpec"
        newToken:
          $ref: "#/components/schemas/LimitSpec"
      required:
        - "errors"
        - "publicApi"
        - "privateApi"
        - "newToken"
    SnowflakeData:
      type: "object"
      properties:
        machineId:
          type: "integer"
          format: "int32"
        sequence:
          type: "integer"
          format: "int64"
        utc:
          $ref: "#/components/schemas/LocalDateTime"
        local:
          $ref: "#/components/schemas/LocalDateTime"
      required:
        - "utc"
        - "local"
    SnowflakeCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        testId:
          type: "string"
        testResult:
          $ref: "#/components/schemas/SnowflakeData"
        timestampEpoch:
          type: "integer"
          format: "int64"
        nanoTimeStart:
          type: "integer"
          format: "int64"
      required:
        - "errors"
    Datasource:
      type: "object"
      properties:
        totalConnections:
          type: "integer"
          format: "int32"
        activeConnections:
          type: "integer"
          format: "int32"
        idleConnections:
          type: "integer"
          format: "int32"
        threadsAwaitingConnection:
          type: "integer"
          format: "int32"
        connectionTimeout:
          type: "integer"
          format: "int64"
        maxLifetime:
          type: "integer"
          format: "int64"
        keepaliveTime:
          type: "integer"
          format: "int64"
        maxPoolSize:
          type: "integer"
          format: "int32"
    ConnectionTest:
      type: "object"
      properties:
        established:
          type: "boolean"
        name:
          type: "string"
        version:
          type: "string"
        dialect:
          type: "string"
        url:
          type: "string"
        vendor:
          type: "string"
        autoCommit:
          type: "boolean"
        catalog:
          type: "string"
      required:
        - "name"
        - "version"
        - "dialect"
        - "url"
        - "vendor"
        - "catalog"
    Configuration:
      type: "object"
      properties:
        poolSize:
          type: "integer"
          format: "int32"
        connectionTimeout:
          type: "integer"
          format: "int64"
        transactionRetryAttempts:
          type: "integer"
          format: "int32"
        warnLongQueriesDurationMs:
          type: "integer"
          format: "int64"
        jdbcDriver:
          type: "string"
        jdbcUrl:
          type: "string"
      required:
        - "jdbcDriver"
        - "jdbcUrl"
    DatabaseCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        alive:
          type: "boolean"
        datasource:
          $ref: "#/components/schemas/Datasource"
        connectionTest:
          $ref: "#/components/schemas/ConnectionTest"
        configuration:
          $ref: "#/components/schemas/Configuration"
        tables:
          type: "array"
          items:
            type: "string"
      required:
        - "errors"
        - "configuration"
        - "tables"
    HealthCheck:
      type: "object"
      properties:
        health:
          type: "array"
          items:
            type: "string"
        application:
          $ref: "#/components/schemas/ApplicationCheck"
        deployment:
          $ref: "#/components/schemas/DeploymentCheck"
        runtime:
          $ref: "#/components/schemas/RuntimeCheck"
        scheduler:
          $ref: "#/components/schemas/SchedulerCheck"
        security:
          $ref: "#/components/schemas/SecurityCheck"
        snowflake:
          $ref: "#/components/schemas/SnowflakeCheck"
        database:
          $ref: "#/components/schemas/DatabaseCheck"
        endpoints:
          type: "array"
          items:
            type: "string"
      required:
        - "health"
        - "application"
        - "deployment"
        - "runtime"
        - "scheduler"
        - "security"
        - "snowflake"
        - "database"
        - "endpoints"
    Uuid:
      type: "object"
      properties:
        mostSignificantBits:
          type: "integer"
          format: "int64"
        leastSignificantBits:
          type: "integer"
          format: "int64"
    Meta:
      type: "object"
      properties:
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
      required:
        - "createdAt"
        - "updatedAt"
    AuditDto:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        taskName:
          type: "string"
        taskGroup:
          type: "string"
        fireTime:
          $ref: "#/components/schemas/LocalDateTime"
        runTime:
          type: "integer"
          format: "int64"
        outcome:
          type: "string"
          enum:
            - "SUCCESS"
            - "ERROR"
        log:
          type: "string"
        detail:
          type: "string"
        meta:
          $ref: "#/components/schemas/Meta"
      required:
        - "id"
        - "taskName"
        - "taskGroup"
        - "fireTime"
        - "outcome"
        - "meta"
    HeaderValueParam:
      type: "object"
      properties:
        name:
          type: "string"
        value:
          type: "string"
        escapeValue:
          type: "boolean"
      required:
        - "name"
        - "value"
    ContentType:
      type: "object"
      properties:
        contentType:
          type: "string"
        contentSubtype:
          type: "string"
        parameters:
          type: "array"
          items:
            $ref: "#/components/schemas/HeaderValueParam"
      required:
        - "contentType"
        - "contentSubtype"
        - "parameters"
    Locale:
      type: "object"
      properties: { }
    ThymeleafContent:
      type: "object"
      properties:
        template:
          type: "string"
        model:
          type: "string"
        etag:
          type: "string"
        contentType:
          $ref: "#/components/schemas/ContentType"
        locale:
          $ref: "#/components/schemas/Locale"
        fragments:
          type: "array"
          items:
            type: "string"
      required:
        - "template"
        - "model"
        - "contentType"
        - "locale"
        - "fragments"
    TaskStateChangeDto:
      type: "object"
      properties:
        totalAffected:
          type: "integer"
          format: "int32"
        alreadyInState:
          type: "integer"
          format: "int32"
        totalTasks:
          type: "integer"
          format: "int32"
        state:
          type: "string"
      required:
        - "state"
    TaskScheduleDto:
      type: "object"
      properties:
        name:
          type: "string"
        snowflakeData:
          type: "string"
        group:
          type: "string"
        consumer:
          type: "string"
        nextFireTime:
          $ref: "#/components/schemas/LocalDateTime"
        state:
          type: "string"
        outcome:
          type: "string"
        log:
          type: "string"
        schedule:
          type: "string"
        scheduleInfo:
          type: "string"
        runs:
          type: "integer"
          format: "int32"
        dataMap:
          type: "array"
          items:
            type: "string"
      required:
        - "name"
        - "snowflakeData"
        - "group"
        - "consumer"
        - "state"
        - "dataMap"
    Page_? extends EmployeeDto:
      type: "object"
      properties:
        totalPages:
          type: "integer"
          format: "int32"
        pageIndex:
          type: "integer"
          format: "int32"
        totalElements:
          type: "integer"
          format: "int32"
        elementsPerPage:
          type: "integer"
          format: "int32"
        elementsInPage:
          type: "integer"
          format: "int32"
        hasNext:
          type: "boolean"
        hasPrevious:
          type: "boolean"
        overflow:
          type: "boolean"
        sort:
          type: "array"
          items:
            $ref: "#/components/schemas/Sort"
        content:
          type: "array"
          items:
            type: "object"
    LocalDate:
      type: "object"
      properties: { }
    ContactDto:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        email:
          type: "string"
        phone:
          type: "string"
        meta:
          $ref: "#/components/schemas/Meta"
      required:
        - "id"
        - "email"
        - "phone"
        - "meta"
    EmployeeDto:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        firstName:
          type: "string"
        lastName:
          type: "string"
        fullName:
          type: "string"
        dob:
          $ref: "#/components/schemas/LocalDate"
        age:
          type: "integer"
          format: "int32"
        maritalStatus:
          type: "string"
          enum:
            - "UNKNOWN"
            - "MARRIED"
            - "SINGLE"
            - "DIVORCED"
        honorific:
          type: "string"
          enum:
            - "UNKNOWN"
            - "MR"
            - "MRS"
            - "MS"
            - "DR"
            - "MISS"
        contact:
          $ref: "#/components/schemas/ContactDto"
        meta:
          $ref: "#/components/schemas/Meta"
      required:
        - "id"
        - "firstName"
        - "lastName"
        - "fullName"
        - "dob"
        - "maritalStatus"
        - "honorific"
        - "meta"
    Period:
      type: "object"
      properties:
        startDate:
          $ref: "#/components/schemas/LocalDate"
        endDate:
          $ref: "#/components/schemas/LocalDate"
        comments:
          type: "string"
      required:
        - "startDate"
    EmploymentDto:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        period:
          $ref: "#/components/schemas/Period"
        status:
          type: "string"
          enum:
            - "ONBOARDING"
            - "ACTIVE"
            - "IDLE"
            - "TERMINATED"
        probationEndDate:
          $ref: "#/components/schemas/LocalDate"
        workModality:
          type: "string"
          enum:
            - "ON_SITE"
            - "REMOTE"
            - "HYBRID"
        employee:
          $ref: "#/components/schemas/EmployeeDto"
        meta:
          $ref: "#/components/schemas/Meta"
      required:
        - "id"
        - "period"
        - "status"
        - "workModality"
        - "employee"
        - "meta"