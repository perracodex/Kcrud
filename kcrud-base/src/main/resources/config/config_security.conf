# Copyright (c) 2023-Present Perraco. All rights reserved.
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>

security {
	# Whether to enable the Basic and JWT Authentication.
	isEnabled: true
	isEnabled: ${?KCRUD_SECURITY_ENABLED}

	# When true, it enables the 'HttpsRedirect' to redirect all HTTP requests to the HTTPS counterpart
	# before processing any call, and the 'HSTS' plugin to add the required HTTP Strict Transport Security
	# headers to all the requests.
	useSecureConnection: false
	useSecureConnection: ${?KCRUD_SECURITY_SECURE_CONNECTION}

	rbac {
		# RBAC requires JWT to be enabled and a valid JWT token in the Authorization header.
		isEnabled: true
		isEnabled: ${?KCRUD_SECURITY_RBAC_ENABLED}
	}

	jwt {
		providerName: "kcrud-jwt-auth"
		providerName: ${?KCRUD_SECURITY_JWT_PROVIDER_NAME}

		tokenLifetimeSec: 86400 # 1 day, (seconds).
		tokenLifetimeSec: ${?KCRUD_SECURITY_JWT_TOKEN_LIFETIME_SEC}

		audience: "kcrud"
		audience: ${?KCRUD_SECURITY_JWT_AUDIENCE}

		realm: "kcrud"
		realm: ${?KCRUD_SECURITY_JWT_REALM}

		issuer: "localhost"
		issuer: ${?KCRUD_SECURITY_JWT_ISSUER}

		secretKey: "9e6e26399b28fc5f5ad1e4431f8a387a60bf94b89716805a376319fcdca35ca8"
		secretKey: ${?KCRUD_SECURITY_JWT_SECRET_KEY}
	}

	basic {
		providerName: "kcrud-basic-auth"
		providerName: ${?KCRUD_SECURITY_BASIC_AUTH_PROVIDER_NAME}

		realm: "kcrud"
		realm: ${?KCRUD_SECURITY_BASIC_AUTH_REALM}
	}

	oauth {
		providerName = "auth0"
		providerName = ${?KCRUD_SECURITY_OAUTH_PROVIDER_NAME}

		# Redirect URL opened when authorization is completed. Must be registered in the OAuth provider.
		redirectCallbackUrl = "http://localhost:8080/oauth/callback"
		redirectCallbackUrl = ${?KCRUD_SECURITY_OAUTH_REDIRECT_CALLBACK_URL}

		# OAuth server authorization page URL. Provided by OAuth server vendor.
		authorizeUrl = "https://TARGET_AUTH0_DOMAIN/authorize"
		authorizeUrl = ${?KCRUD_SECURITY_OAUTH_AUTHORIZE_URL}

		# OAuth server access token request domain URL. Provided by OAuth server vendor.
		accessTokenUrl = "https://TARGET_AUTH0_DOMAIN/oauth/token"
		accessTokenUrl = ${?KCRUD_SECURITY_OAUTH_ACCESS_TOKEN_URL}

		# Client id parameter. Provided by OAuth server vendor.
		clientId = "TARGET_AUTH0_CLIENT_ID"
		clientId = ${?KCRUD_SECURITY_OAUTH_CLIENT_ID}

		# Client secret parameter. Provided by OAuth server vendor.
		clientSecret = "TARGET_AUTH0_CLIENT_SECRET"
		clientSecret = ${?KCRUD_SECURITY_OAUTH_CLIENT_SECRET}

		# List of OAuth scopes used by default. Provided by OAuth server vendor.
		defaultScopes = ["openid", "profile", "email"]
		defaultScopes = ${?KCRUD_SECURITY_OAUTH_DEFAULT_SCOPES}
	}

	# WARNING: The encryption settings below are critical for data privacy and integrity.
	# Changing any of these values post-encryption will result in the inability to decrypt previously encrypted data.
	# It is imperative to establish these values PRIOR to any data input and maintain them consistently to ensure data accessibility.
	# In the event of attribute compromise, you must decrypt all affected data using the former settings before re-encrypting with
	# updated values to prevent data loss. These settings must be handled with extreme caution and have restricted access.
	encryption {
		# Encryption Algorithm Configuration.
		# "AES_256_PBE_CBC" and "AES_256_PBE_GCM" are recommended for their balance of security and performance.
		# Choices: AES_256_PBE_CBC, AES_256_PBE_GCM, BLOW_FISH, TRIPLE_DES
		algorithm: "AES_256_PBE_CBC"
		algorithm: ${?KCRUD_SECURITY_ENCRYPTION_ALGORITHM}

		# Salt for Encryption.
		# Utilized by "AES_256_PBE_CBC" and "AES_256_PBE_GCM" algorithms.
		# Essential for password-based encryption to thwart dictionary attacks.
		# Must be securely generated and unique per encryption operation for optimal security.
		salt: "5c0744940b5c369b"
		salt: ${?KCRUD_SECURITY_ENCRYPTION_SALT}

		# Encryption Key.
		# The secret key for data encryption. For AES-256-based encryption, this should be 32 bytes (256 bits).
		# Ensure this key is strong and securely stored; exposure compromises all encrypted data.
		key: "db82fafdbfe33a8b2bff5297de6e3a5cc15d1309664543cd376839b4d3b6b62e"
		key: ${?KCRUD_SECURITY_ENCRYPTION_KEY}

		# HMAC Signature for Data Integrity.
		# Used to verify the integrity and authenticity of the data. Compromise can lead to undetected tampering.
		# Should be unique and securely stored, similar to the encryption key.
		sign: "6da315f14158bb5b986ea816cb78a329a6d1e0f724e031ca497d6b269cd8e475"
		sign: ${?KCRUD_SECURITY_ENCRYPTION_SIGN}
	}

	# Constraints to be use for endpoints rate limiting.
	constraints {
		publicApi {
			# Maximum number of requests allowed for the Public API.
			# Default is 10_000 requests per second.
			limit: 10000
			limit: ${?KCRUD_SECURITY_CONSTRAINTS_PUBLIC_API_LIMIT}
			refillMs: 1000 # 1 second.
			refillMs: ${?KCRUD_SECURITY_CONSTRAINTS_PUBLIC_API_REFILL_MS}
		}

		newToken {
			# Maximum number of requests allowed for a New Authentication Token generation.
			# Default is 1000 requests every 10 seconds.
			limit: 1000
			limit: ${?KCRUD_SECURITY_CONSTRAINTS_NEW_TOKEN_LIMIT}
			refillMs: 10000 # 10 seconds.
			refillMs: ${?KCRUD_SECURITY_CONSTRAINTS_NEW_TOKEN_REFILL_MS}
		}
	}
}
